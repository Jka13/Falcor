from falcor import *

def render_graph_PhotonReStirFGNRD():
    g = RenderGraph('PhotonReStirFGNRD')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('CompositeReStirNRD.dll')
    loadRenderPassLibrary('DLSSPass.dll')
    loadRenderPassLibrary('VBufferPM.dll')
    loadRenderPassLibrary('ModulateIllumination.dll')
    loadRenderPassLibrary('NRDPass.dll')
    loadRenderPassLibrary('PhotonReStirFinalGathering.dll')
    loadRenderPassLibrary('ReStirExp.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    VBufferPM = createPass('VBufferPM', {'outputSize': IOSize.Default, 'samplePattern': 3, 'specRoughCutoff': 0.5, 'sampleCount': 32, 'useAlphaTest': True, 'adjustShadingNormals': True})
    g.addPass(VBufferPM, 'VBufferPM')
    PhotonReSTIRFinalGathering = createPass('PhotonReSTIRFinalGathering')
    g.addPass(PhotonReSTIRFinalGathering, 'PhotonReSTIRFinalGathering')
    ReStirExp = createPass('ReStirExp')
    g.addPass(ReStirExp, 'ReStirExp')
    CompositeReStirNRD = createPass('CompositeReStirNRD')
    g.addPass(CompositeReStirNRD, 'CompositeReStirNRD')
    NRDDiffuseSpecular = createPass('NRD', {'enabled': True, 'method': NRDMethod.RelaxDiffuseSpecular, 'worldSpaceMotion': True, 'disocclusionThreshold': 2.0, 'maxIntensity': 250.0, 'diffusePrepassBlurRadius': 16.0, 'specularPrepassBlurRadius': 16.0, 'diffuseMaxAccumulatedFrameNum': 31, 'specularMaxAccumulatedFrameNum': 31, 'diffuseMaxFastAccumulatedFrameNum': 2, 'specularMaxFastAccumulatedFrameNum': 2, 'diffusePhiLuminance': 2.0, 'specularPhiLuminance': 1.0, 'diffuseLobeAngleFraction': 0.800000011920929, 'specularLobeAngleFraction': 0.8999999761581421, 'roughnessFraction': 0.5, 'diffuseHistoryRejectionNormalThreshold': 0.0, 'specularVarianceBoost': 1.0, 'specularLobeAngleSlack': 10.0, 'disocclusionFixEdgeStoppingNormalPower': 8.0, 'disocclusionFixMaxRadius': 32.0, 'disocclusionFixNumFramesToFix': 4, 'historyClampingColorBoxSigmaScale': 2.0, 'spatialVarianceEstimationHistoryThreshold': 4, 'atrousIterationNum': 6, 'minLuminanceWeight': 0.0, 'depthThreshold': 0.019999999552965164, 'luminanceEdgeStoppingRelaxation': 0.5, 'normalEdgeStoppingRelaxation': 0.30000001192092896, 'roughnessEdgeStoppingRelaxation': 0.30000001192092896, 'enableAntiFirefly': False, 'enableReprojectionTestSkippingWithoutMotion': False, 'enableSpecularVirtualHistoryClamping': False, 'enableRoughnessEdgeStopping': True, 'enableMaterialTestForDiffuse': False, 'enableMaterialTestForSpecular': False})
    g.addPass(NRDDiffuseSpecular, 'NRDDiffuseSpecular')
    NRDDeltaReflection = createPass('NRD', {'enabled': True, 'method': NRDMethod.RelaxDiffuse, 'worldSpaceMotion': False, 'disocclusionThreshold': 2.0, 'maxIntensity': 250.0, 'diffusePrepassBlurRadius': 16.0, 'diffuseMaxAccumulatedFrameNum': 31, 'diffuseMaxFastAccumulatedFrameNum': 2, 'diffusePhiLuminance': 2.0, 'diffuseLobeAngleFraction': 0.800000011920929, 'diffuseHistoryRejectionNormalThreshold': 0.0, 'disocclusionFixEdgeStoppingNormalPower': 8.0, 'disocclusionFixMaxRadius': 32.0, 'disocclusionFixNumFramesToFix': 4, 'historyClampingColorBoxSigmaScale': 2.0, 'spatialVarianceEstimationHistoryThreshold': 1, 'atrousIterationNum': 6, 'minLuminanceWeight': 0.0, 'depthThreshold': 0.019999999552965164, 'enableAntiFirefly': False, 'enableReprojectionTestSkippingWithoutMotion': True, 'enableMaterialTestForDiffuse': False})
    g.addPass(NRDDeltaReflection, 'NRDDeltaReflection')
    NRDDeltaTransmission = createPass('NRD', {'enabled': True, 'method': NRDMethod.RelaxDiffuse, 'worldSpaceMotion': False, 'disocclusionThreshold': 2.0, 'maxIntensity': 250.0, 'diffusePrepassBlurRadius': 16.0, 'diffuseMaxAccumulatedFrameNum': 31, 'diffuseMaxFastAccumulatedFrameNum': 2, 'diffusePhiLuminance': 2.0, 'diffuseLobeAngleFraction': 0.800000011920929, 'diffuseHistoryRejectionNormalThreshold': 0.0, 'disocclusionFixEdgeStoppingNormalPower': 8.0, 'disocclusionFixMaxRadius': 32.0, 'disocclusionFixNumFramesToFix': 4, 'historyClampingColorBoxSigmaScale': 2.0, 'spatialVarianceEstimationHistoryThreshold': 4, 'atrousIterationNum': 6, 'minLuminanceWeight': 0.0, 'depthThreshold': 0.019999999552965164, 'enableAntiFirefly': False, 'enableReprojectionTestSkippingWithoutMotion': True, 'enableMaterialTestForDiffuse': False})
    g.addPass(NRDDeltaTransmission, 'NRDDeltaTransmission')
    NRDReflectionMotionVectors = createPass('NRD', {'enabled': True, 'method': NRDMethod.SpecularReflectionMv, 'worldSpaceMotion': False, 'disocclusionThreshold': 2.0, 'maxIntensity': 1000.0})
    g.addPass(NRDReflectionMotionVectors, 'NRDReflectionMotionVectors')
    NRDTransmissionMotionVectors = createPass('NRD', {'enabled': True, 'method': NRDMethod.SpecularDeltaMv, 'worldSpaceMotion': False, 'disocclusionThreshold': 2.0, 'maxIntensity': 1000.0})
    g.addPass(NRDTransmissionMotionVectors, 'NRDTransmissionMotionVectors')
    ModulateIllumination = createPass('ModulateIllumination', {'useEmission': True, 'useDiffuseReflectance': True, 'useDiffuseRadiance': True, 'useSpecularReflectance': True, 'useSpecularRadiance': True, 'useDeltaReflectionEmission': True, 'useDeltaReflectionReflectance': True, 'useDeltaReflectionRadiance': True, 'useDeltaTransmissionEmission': True, 'useDeltaTransmissionReflectance': True, 'useDeltaTransmissionRadiance': True, 'useResidualRadiance': False})
    g.addPass(ModulateIllumination, 'ModulateIllumination')
    AccumulatePass = createPass('AccumulatePass', {'enabled': False, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Single, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass, 'AccumulatePass')
    ToneMapper = createPass('ToneMapper', {'outputSize': IOSize.Default, 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': ExposureMode.AperturePriority})
    g.addPass(ToneMapper, 'ToneMapper')
    g.addEdge('VBufferPM.vbuffer', 'ReStirExp.vbuffer')
    g.addEdge('VBufferPM.vbuffer', 'PhotonReSTIRFinalGathering.VBuffer')
    g.addEdge('VBufferPM.viewW', 'ReStirExp.view')
    g.addEdge('VBufferPM.viewW', 'PhotonReSTIRFinalGathering.View')
    g.addEdge('VBufferPM.mvec', 'ReStirExp.mVec')
    g.addEdge('VBufferPM.mvec', 'PhotonReSTIRFinalGathering.MVec')
    g.addEdge('VBufferPM.linearDepth', 'ReStirExp.linZ')
    g.addEdge('VBufferPM.linearDepth', 'PhotonReSTIRFinalGathering.RayDepth')
    g.addEdge('PhotonReSTIRFinalGathering.diffuseIllumination', 'CompositeReStirNRD.PhotonReStirDiffuse')
    g.addEdge('PhotonReSTIRFinalGathering.specularIllumination', 'CompositeReStirNRD.PhotonReStirSpecular')
    g.addEdge('ReStirExp.diffuseIllumination', 'CompositeReStirNRD.ReStirDiffuse')
    g.addEdge('ReStirExp.specularIllumination', 'CompositeReStirNRD.ReStirSpecular')
    g.addEdge('VBufferPM.NRDMask', 'CompositeReStirNRD.NRDMask')
    g.addEdge('VBufferPM.throughput', 'CompositeReStirNRD.throughput')
    g.addEdge('CompositeReStirNRD.NRDDiffuseRadianceHitDistance', 'NRDDiffuseSpecular.diffuseRadianceHitDist')
    g.addEdge('CompositeReStirNRD.NRDSpecularRadianceHitDistance', 'NRDDiffuseSpecular.specularRadianceHitDist')
    g.addEdge('VBufferPM.FirstHitLinZ', 'NRDDiffuseSpecular.viewZ')
    g.addEdge('VBufferPM.normWRoughMat', 'NRDDiffuseSpecular.normWRoughnessMaterialID')
    g.addEdge('VBufferPM.mvec', 'NRDDiffuseSpecular.mvec')
    g.addEdge('NRDDiffuseSpecular.filteredDiffuseRadianceHitDist', 'ModulateIllumination.diffuseRadiance')
    g.addEdge('NRDDiffuseSpecular.filteredSpecularRadianceHitDist', 'ModulateIllumination.specularRadiance')
    g.addEdge('ModulateIllumination.output', 'AccumulatePass.input')
    g.addEdge('VBufferPM.NRDDiffuseReflectance', 'ModulateIllumination.diffuseReflectance')
    g.addEdge('VBufferPM.emissive', 'ModulateIllumination.emission')
    g.addEdge('VBufferPM.NRDSpecularReflectance', 'ModulateIllumination.specularReflectance')
    g.addEdge('VBufferPM.FirstHitLinZ', 'NRDReflectionMotionVectors.viewZ')
    g.addEdge('VBufferPM.normWRoughMat', 'NRDReflectionMotionVectors.normWRoughnessMaterialID')
    g.addEdge('VBufferPM.mvec', 'NRDReflectionMotionVectors.mvec')
    g.addEdge('VBufferPM.NRDDeltaReflectionHitDistance', 'NRDReflectionMotionVectors.specularHitDist')
    g.addEdge('NRDReflectionMotionVectors.reflectionMvec', 'NRDDeltaReflection.mvec')
    g.addEdge('VBufferPM.NRDDeltaReflectionNormWRoughMat', 'NRDDeltaReflection.normWRoughnessMaterialID')
    g.addEdge('VBufferPM.linearDepth', 'NRDDeltaReflection.viewZ')
    g.addEdge('CompositeReStirNRD.NRDDeltaReflectionRadianceHitDistance', 'NRDDeltaReflection.diffuseRadianceHitDist')
    g.addEdge('NRDDeltaReflection.filteredDiffuseRadianceHitDist', 'ModulateIllumination.deltaReflectionRadiance')
    g.addEdge('VBufferPM.NRDDeltaReflectionEmission', 'ModulateIllumination.deltaReflectionEmission')
    g.addEdge('VBufferPM.NRDDeltaReflectionReflectance', 'ModulateIllumination.deltaReflectionReflectance')
    g.addEdge('VBufferPM.NRDFirstPosW', 'NRDTransmissionMotionVectors.deltaPrimaryPosW')
    g.addEdge('VBufferPM.NRDDeltaTransmissionPosW', 'NRDTransmissionMotionVectors.deltaSecondaryPosW')
    g.addEdge('VBufferPM.mvec', 'NRDTransmissionMotionVectors.mvec')
    g.addEdge('NRDTransmissionMotionVectors.deltaMvec', 'NRDDeltaTransmission.mvec')
    g.addEdge('VBufferPM.NRDDeltaTransmissionNormWRoughMat', 'NRDDeltaTransmission.normWRoughnessMaterialID')
    g.addEdge('VBufferPM.linearDepth', 'NRDDeltaTransmission.viewZ')
    g.addEdge('CompositeReStirNRD.NRDDeltaTransmissionRadianceHitDistance', 'NRDDeltaTransmission.diffuseRadianceHitDist')
    g.addEdge('NRDDeltaTransmission.filteredDiffuseRadianceHitDist', 'ModulateIllumination.deltaTransmissionRadiance')
    g.addEdge('VBufferPM.NRDDeltaTransmissionEmission', 'ModulateIllumination.deltaTransmissionEmission')
    g.addEdge('VBufferPM.NRDDeltaTransmissionReflectance', 'ModulateIllumination.deltaTransmissionReflectance')
    g.addEdge('AccumulatePass.output', 'ToneMapper.src')
    g.markOutput('ToneMapper.dst')
    g.markOutput('AccumulatePass.output')
    return g

PhotonReStirFGNRD = render_graph_PhotonReStirFGNRD()
try: m.addGraph(PhotonReStirFGNRD)
except NameError: None
