from falcor import *

def render_graph_FGReSTIR():
    g = RenderGraph('FGReSTIR')
    loadRenderPassLibrary('PhotonMapper.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('DLSSPass.dll')
    loadRenderPassLibrary('VBufferPM.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('NRDPass.dll')
    loadRenderPassLibrary('PathVBuffer.dll')
    loadRenderPassLibrary('PhotonReStirFinalGathering.dll')
    loadRenderPassLibrary('PTVBuffer.dll')
    loadRenderPassLibrary('ReStirExp.dll')
    loadRenderPassLibrary('RTXDIPass.dll')
    loadRenderPassLibrary('RTXGIPass.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('Utils.dll')
    AccumulatePass = createPass('AccumulatePass', {'enabled': False, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Single, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass, 'AccumulatePass')
    ToneMapper = createPass('ToneMapper', {'outputSize': IOSize.Default, 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': ExposureMode.AperturePriority})
    g.addPass(ToneMapper, 'ToneMapper')
    VBufferPM = createPass('VBufferPM', {'outputSize': IOSize.Default, 'samplePattern': 3, 'specRoughCutoff': 1.0, 'sampleCount': 32, 'useAlphaTest': True, 'adjustShadingNormals': True})
    g.addPass(VBufferPM, 'VBufferPM')
    ReStirExp = createPass('ReStirExp')
    g.addPass(ReStirExp, 'ReStirExp')
    CompositeReStirVpl = createPass('CompositeReStirVpl')
    g.addPass(CompositeReStirVpl, 'CompositeReStirVpl')
    PhotonReSTIRFinalGathering = createPass('PhotonReSTIRFinalGathering')
    g.addPass(PhotonReSTIRFinalGathering, 'PhotonReSTIRFinalGathering')
    g.addEdge('VBufferPM.mvec', 'ReStirExp.mVec')
    g.addEdge('VBufferPM.linearDepth', 'ReStirExp.linZ')
    g.addEdge('AccumulatePass.output', 'ToneMapper.src')
    g.addEdge('VBufferPM.vbuffer', 'ReStirExp.vbuffer')
    g.addEdge('VBufferPM.viewW', 'ReStirExp.view')
    g.addEdge('CompositeReStirVpl.Out', 'AccumulatePass.input')
    g.addEdge('ReStirExp.color', 'CompositeReStirVpl.ReStir')
    g.addEdge('VBufferPM.throughput', 'CompositeReStirVpl.Throughput')
    g.addEdge('VBufferPM.vbuffer', 'PhotonReSTIRFinalGathering.VBuffer')
    g.addEdge('VBufferPM.mvec', 'PhotonReSTIRFinalGathering.MVec')
    g.addEdge('VBufferPM.viewW', 'PhotonReSTIRFinalGathering.View')
    g.addEdge('VBufferPM.linearDepth', 'PhotonReSTIRFinalGathering.RayDepth')
    g.addEdge('PhotonReSTIRFinalGathering.color', 'CompositeReStirVpl.ReStirVpl')
    g.markOutput('ToneMapper.dst')
    g.markOutput('AccumulatePass.output')
    
    return g

FGReSTIR = render_graph_FGReSTIR()
try: m.addGraph(FGReSTIR)
except NameError: None
