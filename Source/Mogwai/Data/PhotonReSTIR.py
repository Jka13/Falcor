from falcor import *

def render_graph_g():
    g = RenderGraph('PhotonReSTIR')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('CompositeReStirVpl.dll')
    loadRenderPassLibrary('VBufferPM.dll')
    loadRenderPassLibrary('PhotonMapperHash.dll')
    loadRenderPassLibrary('PhotonReSTIR.dll')
    loadRenderPassLibrary('RTXDIPass.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    AccumulatePass = createPass('AccumulatePass', {'enabled': False, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Single, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass, 'AccumulatePass')
    ToneMapper = createPass('ToneMapper', {'outputSize': IOSize.Default, 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': ExposureMode.AperturePriority})
    g.addPass(ToneMapper, 'ToneMapper')
    VBufferPM = createPass('VBufferPM', {'outputSize': IOSize.Default, 'samplePattern': 3, 'specRoughCutoff': 1.0, 'sampleCount': 32, 'useAlphaTest': True, 'adjustShadingNormals': True})
    g.addPass(VBufferPM, 'VBufferPM')
    RTXDIPass = createPass('RTXDIPass', {'options': RTXDIOptions(mode=RTXDIMode.SpatiotemporalResampling, presampledTileCount=128, presampledTileSize=1024, storeCompactLightInfo=True, localLightCandidateCount=24, infiniteLightCandidateCount=8, envLightCandidateCount=8, brdfCandidateCount=1, brdfCutoff=0.0, testCandidateVisibility=True, biasCorrection=RTXDIBiasCorrection.Basic, depthThreshold=0.10000000149011612, normalThreshold=0.5, samplingRadius=30.0, spatialSampleCount=1, spatialIterations=5, maxHistoryLength=20, boilingFilterStrength=0.0, rayEpsilon=0.0010000000474974513, useEmissiveTextures=False, enableVisibilityShortcut=False, enablePermutationSampling=False)})
    g.addPass(RTXDIPass, 'RTXDIPass')
    PhotonReSTIR = createPass('PhotonReSTIR')
    g.addPass(PhotonReSTIR, 'PhotonReSTIR')
    CompositeReStirVpl = createPass('CompositeReStirVpl')
    g.addPass(CompositeReStirVpl, 'CompositeReStirVpl')
    g.addEdge('VBufferPM.viewW', 'PhotonReSTIR.View')
    g.addEdge('AccumulatePass.output', 'ToneMapper.src')
    g.addEdge('VBufferPM.mvec', 'PhotonReSTIR.MVec')
    g.addEdge('VBufferPM.vbuffer', 'PhotonReSTIR.VBuffer')
    g.addEdge('VBufferPM.linearDepth', 'PhotonReSTIR.RayDistance')
    g.addEdge('VBufferPM.vbuffer', 'RTXDIPass.vbuffer')
    g.addEdge('VBufferPM.mvec', 'RTXDIPass.mvec')
    g.addEdge('VBufferPM.viewW', 'RTXDIPass.viewDir')
    g.addEdge('VBufferPM.linearDepth', 'RTXDIPass.pathLength')
    g.addEdge('RTXDIPass.color', 'CompositeReStirVpl.ReStir')
    g.addEdge('PhotonReSTIR.color', 'CompositeReStirVpl.ReStirVpl')
    g.addEdge('VBufferPM.throughput', 'CompositeReStirVpl.Throughput')
    g.addEdge('CompositeReStirVpl.Out', 'AccumulatePass.input')
    g.markOutput('ToneMapper.dst')
    g.markOutput('AccumulatePass.output')
    
    return g

g = render_graph_g()
try: m.addGraph(g)
except NameError: None
